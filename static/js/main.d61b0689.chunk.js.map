{"version":3,"sources":["components/Checkbox.js","components/Panel.js","components/PanelsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","onChange","e","props","onCheckboxChange","id","onClick","stopPropagation","this","className","checkboxClassName","type","name","value","React","Component","Panel","onPanelClick","panelArrow","panelContent","activePanel","onPanelComplete","panelTitle","panelBody","PanelsContainer","getPercentComplete","Math","round","state","completedPanels","length","panelsContent","panelId","setState","newCompletedPanels","includes","idxToRemove","indexOf","splice","push","panels","forEach","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d61b0689.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Checkbox extends React.Component {\r\n  onChange = (e) => {\r\n    this.props.onCheckboxChange(this.props.id);\r\n  };\r\n\r\n  onClick = (e) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <input\r\n          onClick={this.onClick}\r\n          onChange={this.onChange}\r\n          className={this.props.checkboxClassName}\r\n          type=\"checkbox\"\r\n          id=\"\"\r\n          name=\"\"\r\n          value=\"\"\r\n        ></input>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./../styles/Panel.css\";\r\nimport \"./../styles/Common.css\";\r\nimport Checkbox from \"./Checkbox\";\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\n\r\nexport default class Panel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  onClick = (e) => {\r\n    this.props.onPanelClick(this.props.id);\r\n  };\r\n\r\n  render() {\r\n    let panelContent = this.props.panelContent;\r\n\r\n    let thisPanelActive = this.props.id === this.props.activePanel;\r\n\r\n    let className = \"panel\";\r\n    let panelArrow;\r\n    if (thisPanelActive) {\r\n      className += \" panel-active\";\r\n      panelArrow = (<KeyboardArrowUpIcon/>)\r\n    } else {\r\n        panelArrow = (<KeyboardArrowDownIcon/>)\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n      <div onClick={this.onClick} className={className}>\r\n        <div className=\"panel-header\">\r\n          <div className=\"panel-header-left\">\r\n            <Checkbox\r\n              onCheckboxChange={this.props.onPanelComplete}\r\n              id={this.props.id}\r\n              key={this.props.id}\r\n            />\r\n          </div>\r\n          <div className=\"panel-header-title\">\r\n            <p>{panelContent.panelTitle}</p>\r\n          </div>\r\n          <div className={\"panel-header-right\"}>\r\n              {panelArrow}\r\n          </div>\r\n        </div>\r\n\r\n        <p>{panelContent.panelBody}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Panel from \"./Panel.js\";\r\n\r\nexport default class PanelsContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activePanel: null,\r\n      completedPanels: [],\r\n    };\r\n  }\r\n\r\n  getPercentComplete = () => {\r\n    return Math.round(\r\n      (this.state.completedPanels.length / this.props.panelsContent.length) *\r\n        100\r\n    );\r\n  };\r\n\r\n  onPanelClick = (panelId) => {\r\n    this.setState({\r\n      activePanel: this.state.activePanel === panelId ? null : panelId,\r\n    });\r\n  };\r\n\r\n  onPanelComplete = (panelId) => {\r\n    let newCompletedPanels = this.state.completedPanels;\r\n    if (newCompletedPanels.includes(panelId)) {\r\n      let idxToRemove = newCompletedPanels.indexOf(panelId);\r\n      newCompletedPanels.splice(idxToRemove, 1);\r\n      this.setState({\r\n        completedPanels: newCompletedPanels,\r\n      });\r\n    } else {\r\n      newCompletedPanels.push(panelId);\r\n      this.setState({\r\n        completedPanels: newCompletedPanels,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let panels = [];\r\n    this.props.panelsContent.forEach((panelContent, index) => {\r\n      panels.push(\r\n        <Panel\r\n          key={index + 1}\r\n          id={index + 1}\r\n          activePanel={this.state.activePanel}\r\n          onPanelClick={this.onPanelClick}\r\n          onPanelComplete={this.onPanelComplete}\r\n          panelContent={panelContent}\r\n        ></Panel>\r\n      );\r\n    });\r\n    return (\r\n      <>\r\n        <div>Currently open panel is {`${this.state.activePanel}`}</div>\r\n        <div>\r\n          This panel container is {this.getPercentComplete()}% completed\r\n        </div>\r\n\r\n        {panels}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PanelsContainer from \"./components/PanelsContainer.js\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    const panelsContent = [\n      { panelTitle: \"First panel\", panelBody: \"Hello there\" },\n      { panelTitle: \"Second panel\", panelBody: \"Another happy landing\" },\n      { panelTitle: \"Third panel\", panelBody: \"The negotiations were short\" },\n    ];\n\n    return (\n      <div className=\"App\">\n        <PanelsContainer panelsContent={panelsContent}></PanelsContainer>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}