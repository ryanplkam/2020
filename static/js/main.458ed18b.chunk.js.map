{"version":3,"sources":["components/MyAccordion.js","components/PanelsContainer.js","components/MyFab.js","App.js","reportWebVitals.js","index.js"],"names":["MyAccordion","onClick","e","props","onAccordionSelect","id","onComplete","onAccordionComplete","Accordion","this","AccordionSummary","expandIcon","aria-controls","FormControlLabel","aria-label","event","stopPropagation","onFocus","control","Checkbox","onChange","label","summary","AccordionDetails","Typography","details","Component","PanelsContainer","getDisplayPercent","percentComplete","getPercentComplete","isNaN","Math","round","Object","values","accordions","filter","x","complete","length","keys","onPanelSelect","panelId","getMessage","entries","key","value","push","onAccordionDelete","className","React","MyFab","classes","makeStyles","fabDesktop","position","bottom","right","fabMobile","useStyles","useMediaQuery","Fab","App","onCreateNewEmptyPanel","nextId","max","state","setState","active","onPanelComplete","accordionId","newAccordions","onPanelDelete","1","2","3","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.458ed18b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nexport default class MyAccordion extends Component {\n  onClick = (e) => {\n    this.props.onAccordionSelect(this.props.id);\n  };\n\n  onComplete = (e) => {\n    this.props.onAccordionComplete(this.props.id);\n  };\n\n  render() {\n    return (\n      <>\n        <Accordion onClick={this.onClick}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <FormControlLabel\n              aria-label=\"Acknowledge\"\n              onClick={(event) => event.stopPropagation()}\n              onFocus={(event) => event.stopPropagation()}\n              control={<Checkbox onChange={this.onComplete} />}\n              label={this.props.summary}\n            />\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>{this.props.details}</Typography>\n          </AccordionDetails>\n        </Accordion>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport MyAccordion from \"./MyAccordion.js\";\nimport \"./../styles/PanelsContainer.css\";\n\nexport default class PanelsContainer extends React.Component {\n  getDisplayPercent = () => {\n    let percentComplete = this.getPercentComplete();\n    return isNaN(percentComplete) ? \"\" : percentComplete;\n  };\n\n  // returns NaN or a number 0 - 100\n  getPercentComplete = () => {\n    return Math.round(\n      (Object.values(this.props.accordions).filter((x) => x.complete).length /\n        Object.keys(this.props.accordions).length) *\n        100\n    );\n  };\n\n  onPanelSelect = (panelId) => {\n    this.props.onAccordionSelect(panelId);\n  };\n\n  getMessage = () => {\n    let percentComplete = this.getPercentComplete();\n    if (isNaN(percentComplete))\n      return \"Oops, all out of boxes! Add some boxes or refresh the page to start again\";\n    switch (percentComplete) {\n      case 100:\n        return \":)\";\n      default:\n        return \"Check the boxes to get started.\";\n    }\n  };\n\n  render() {\n    let accordions = [];\n    for (const [key, value] of Object.entries(this.props.accordions)) {\n      accordions.push(\n        <MyAccordion\n          id={key}\n          key={key}\n          summary={value.summary}\n          details={value.details}\n          onAccordionSelect={this.onPanelSelect}\n          onAccordionComplete={this.props.onAccordionComplete}\n          onAccordionDelete={this.props.onAccordionDelete}\n        ></MyAccordion>\n      );\n    }\n\n    let className = \"panel-container\";\n    return (\n      <div className={className}>\n        {/*<div onClick={this.props.onCreateNewEmptyPanel}>Click me to create a new empty panel</div>*/}\n        {this.getMessage()}\n        <div className=\"panel-container-header\">\n          <div className=\"panel-container-header-left\">\n            <b>Topics</b>\n          </div>\n          <div className=\"panel-container-header-right\">\n            Completion: {this.getDisplayPercent()}%\n          </div>\n        </div>\n        {accordions}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Fab, useMediaQuery } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport \"./../styles/MyFab.css\";\r\n\r\nexport default function MyFab(props) {\r\n  // returns a function\r\n  const useStyles = makeStyles({\r\n    fabDesktop: {\r\n      position: \"absolute\",\r\n      bottom: \"40px\",\r\n      right: \"10%\",\r\n    },\r\n    fabMobile: {\r\n      position: \"absolute\",\r\n      bottom: \"20px\",\r\n      right: \"16px\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  const isMobile = useMediaQuery(\"(max-width: 600px)\");\r\n\r\n  let className = isMobile ? classes.fabMobile : classes.fabDesktop;\r\n\r\n  return (\r\n    <Fab className={className}>\r\n      <AddIcon></AddIcon>\r\n    </Fab>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PanelsContainer from \"./components/PanelsContainer.js\";\nimport MyFab from \"./components/MyFab.js\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      accordions: {\n        1: {\n          summary: \"First panel\",\n          details: \"Hello there\",\n          complete: false,\n          active: false,\n        },\n        2: {\n          summary: \"Second panel\",\n          details: \"Another happy landing\",\n          complete: false,\n          active: false,\n        },\n        3: {\n          summary: \"Third panel\",\n          details: \"The negotiations were short\",\n          complete: false,\n          active: false,\n        },\n      },\n    };\n  }\n\n  onCreateNewEmptyPanel = () => {\n    let nextId = Math.max(...Object.keys(this.state.accordions)) + 1\n    this.setState({\n      accordions: {\n        ...this.state.accordions,\n          [nextId]: {\n          summary: \"Lorem ipsum\",\n          details: \"Lorem ipsum\",\n          complete: false,\n          active: false,\n        },\n      },\n    });\n  };\n\n  onPanelComplete = (accordionId) => {\n    let newAccordions = { ...this.state.accordions };\n    newAccordions[accordionId][\"complete\"] = !newAccordions[accordionId][\n      \"complete\"\n    ];\n    this.setState({\n      accordions: newAccordions,\n    });\n  };\n\n  onPanelDelete = (accordionId) => {\n    let newAccordions = { ...this.state.accordions };\n    delete newAccordions[accordionId];\n    this.setState({\n      accordions: newAccordions,\n    });\n  };\n\n  onPanelSelect = (accordionId) => {\n    let newAccordions = { ...this.state.accordions };\n    newAccordions[accordionId][\"active\"] = !newAccordions[accordionId][\"active\"];\n    this.setState({ accordions: newAccordions });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PanelsContainer\n          onCreateNewEmptyPanel={this.onCreateNewEmptyPanel}\n          onAccordionDelete={this.onPanelDelete}\n          onAccordionComplete={this.onPanelComplete}\n          onAccordionSelect={this.onPanelSelect}\n          accordions={this.state.accordions}\n        ></PanelsContainer>\n        <MyFab></MyFab>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}