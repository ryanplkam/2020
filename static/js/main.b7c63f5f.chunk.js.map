{"version":3,"sources":["components/Checkbox.js","components/Panel.js","components/PanelsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","onChange","e","props","onCheckboxChange","id","onClick","stopPropagation","this","className","checkboxClassName","type","name","value","React","Component","Panel","onPanelClick","panelArrow","panelContent","active","onPanelComplete","panelTitle","panelBody","PanelsContainer","getPercentComplete","Math","round","state","completedPanels","length","panelsContent","panelId","setState","activePanel","newCompletedPanels","includes","idxToRemove","indexOf","splice","push","panels","forEach","index","percentComplete","message","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c63f5f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Checkbox extends React.Component {\n  onChange = (e) => {\n    this.props.onCheckboxChange(this.props.id);\n  };\n\n  onClick = (e) => {\n    e.stopPropagation();\n  };\n\n  render() {\n    return (\n      <>\n        <input\n          onClick={this.onClick}\n          onChange={this.onChange}\n          className={this.props.checkboxClassName}\n          type=\"checkbox\"\n          id=\"\"\n          name=\"\"\n          value=\"\"\n        ></input>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./../styles/Panel.css\";\nimport \"./../styles/Common.css\";\nimport Checkbox from \"./Checkbox\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\n\nexport default class Panel extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  onClick = (e) => {\n    this.props.onPanelClick(this.props.id);\n  };\n\n  render() {\n    let panelContent = this.props.panelContent;\n\n    let className = \"panel\";\n    let panelArrow;\n    if (this.props.active) {\n      className += \" panel-active\";\n      panelArrow = <KeyboardArrowUpIcon />;\n    } else {\n      panelArrow = <KeyboardArrowDownIcon />;\n    }\n\n    return (\n      <div onClick={this.onClick} className={className}>\n        <div className=\"panel-header\">\n          <div className=\"panel-header-left\">\n            <Checkbox\n              onCheckboxChange={this.props.onPanelComplete}\n              id={this.props.id}\n              key={this.props.id}\n            />\n          </div>\n          <div className=\"panel-header-title\">\n            <p>{panelContent.panelTitle}</p>\n          </div>\n          <div className={\"panel-header-right\"}>{panelArrow}</div>\n        </div>\n\n        <div className=\"panel-body\">\n          <p>{panelContent.panelBody}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Panel from \"./Panel.js\";\nimport \"./../styles/PanelsContainer.css\";\n\nexport default class PanelsContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activePanel: null,\n      completedPanels: [],\n    };\n  }\n\n  getPercentComplete = () => {\n    return Math.round(\n      (this.state.completedPanels.length / this.props.panelsContent.length) *\n        100\n    );\n  };\n\n  onPanelClick = (panelId) => {\n    this.setState({\n      activePanel: this.state.activePanel === panelId ? null : panelId,\n    });\n  };\n\n  onPanelComplete = (panelId) => {\n    let newCompletedPanels = [...this.state.completedPanels]; // Don't mutate state directly\n    if (newCompletedPanels.includes(panelId)) {\n      let idxToRemove = newCompletedPanels.indexOf(panelId);\n      newCompletedPanels.splice(idxToRemove, 1);\n      this.setState({\n        completedPanels: newCompletedPanels,\n      });\n    } else {\n      newCompletedPanels.push(panelId);\n      this.setState({\n        completedPanels: newCompletedPanels,\n      });\n    }\n  };\n\n  render() {\n    let panels = [];\n    this.props.panelsContent.forEach((panelContent, index) => {\n      let panelId = index + 1;\n      panels.push(\n        <Panel\n          key={panelId}\n          id={panelId}\n          active={this.state.activePanel === panelId}\n          onPanelClick={this.onPanelClick}\n          onPanelComplete={this.onPanelComplete}\n          panelContent={panelContent}\n        ></Panel>\n      );\n    });\n    let percentComplete = this.getPercentComplete();\n    let className = \"panel-container\";\n    let message = percentComplete === 100 ? \":)\" : \"Check the boxes to get started.\"\n    return (\n      <div className={className}>\n        {message}\n        <div className=\"panel-container-header\">\n          <div className=\"panel-container-header-left\"><b>Topics</b></div>\n          <div className=\"panel-container-header-right\">Completion: {percentComplete}%</div>\n        </div>\n        {panels}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport PanelsContainer from \"./components/PanelsContainer.js\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    const panelsContent = [\n      { panelTitle: \"First panel\", panelBody: \"Hello there\" },\n      { panelTitle: \"Second panel\", panelBody: \"Another happy landing\" },\n      { panelTitle: \"Third panel\", panelBody: \"The negotiations were short\" },\n    ];\n\n    return (\n      <div className=\"App\">\n        <PanelsContainer panelsContent={panelsContent}></PanelsContainer>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}