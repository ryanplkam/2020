{"version":3,"sources":["components/Panel.js","components/PanelsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Panel","onClick","e","props","onPanelSelect","id","onDelete","stopPropagation","onPanelDelete","onComplete","onPanelComplete","onCheckboxClick","panelArrow","panelContent","this","className","active","Checkbox","onChange","panelTitle","IconButton","aria-label","panelBody","React","Component","PanelsContainer","getDisplayPercent","percentComplete","getPercentComplete","isNaN","Math","round","Object","values","panelsContent","filter","x","complete","length","keys","panelId","getMessage","panels","entries","key","value","push","App","onCreateNewEmptyPanel","nextId","max","state","setState","newPanelsContent","entry","forEach","panel","1","2","3","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b81e914e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./../styles/Panel.css\";\nimport \"./../styles/Common.css\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nexport default class Panel extends React.Component {\n  onClick = (e) => {\n    this.props.onPanelSelect(this.props.id);\n  };\n\n  onDelete = (e) => {\n    e.stopPropagation();\n    this.props.onPanelDelete(this.props.id);\n  };\n\n  onComplete = (e) => {\n    this.props.onPanelComplete(this.props.id);\n  };\n\n  onCheckboxClick = (e) => {\n    e.stopPropagation();\n  };\n\n  render() {\n    let panelContent = this.props.panelContent;\n\n    let className = \"panel\";\n    let panelArrow;\n    if (this.props.active) {\n      className += \" panel-active\";\n      panelArrow = <KeyboardArrowUpIcon />;\n    } else {\n      panelArrow = <KeyboardArrowDownIcon />;\n    }\n\n    return (\n      <div onClick={this.onClick} className={className}>\n        <div className=\"panel-header\">\n          <div className=\"panel-header-left\">\n            <Checkbox\n              onClick={this.onCheckboxClick}\n              onChange={this.onComplete}\n              id={this.props.id}\n              key={this.props.id}\n            />\n          </div>\n          <div className=\"panel-header-title\">\n            <p>{panelContent.panelTitle}</p>\n          </div>\n          <div className={\"panel-header-right\"}>\n            <IconButton aria-label=\"delete\" onClick={this.onDelete}>\n              <DeleteIcon/>\n            </IconButton>\n          </div>\n          <div className={\"panel-header-right\"}>{panelArrow}</div>\n        </div>\n\n        <div className=\"panel-body\">\n          <p>{panelContent.panelBody}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Panel from \"./Panel.js\";\nimport \"./../styles/PanelsContainer.css\";\n\nexport default class PanelsContainer extends React.Component {\n  getDisplayPercent = () => {\n    let percentComplete = this.getPercentComplete();\n    return isNaN(percentComplete) ? \"\" : percentComplete;\n  };\n\n  // returns NaN or a number 0 - 100\n  getPercentComplete = () => {\n    return Math.round(\n      (Object.values(this.props.panelsContent).filter((x) => x.complete)\n        .length /\n        Object.keys(this.props.panelsContent).length) *\n        100\n    );\n  };\n\n  onPanelSelect = (panelId) => {\n    this.props.onPanelSelect(panelId);\n  };\n\n  getMessage = () => {\n    let percentComplete = this.getPercentComplete();\n    if (isNaN(percentComplete))\n      return \"Oops, all out of boxes! Add some boxes or refresh the page to start again\";\n    switch (percentComplete) {\n      case 100:\n        return \":)\";\n      default:\n        return \"Check the boxes to get started.\";\n    }\n  };\n\n    render() {\n    let panels = [];\n\n    for (const [key, value] of Object.entries(this.props.panelsContent)) {\n      panels.push(\n        <Panel\n          key={key}\n          id={key}\n          active={value[\"active\"]}\n          onPanelSelect={this.onPanelSelect}\n          onPanelComplete={this.props.onPanelComplete}\n          onPanelDelete={this.props.onPanelDelete}\n          panelContent={value}\n        ></Panel>\n      );\n    }\n\n    let className = \"panel-container\";\n    return (\n      <div className={className}>\n        {/*<div onClick={this.props.onCreateNewEmptyPanel}>Click me to create a new empty panel</div>*/}\n        {this.getMessage()}\n        <div className=\"panel-container-header\">\n          <div className=\"panel-container-header-left\">\n            <b>Topics</b>\n          </div>\n          <div className=\"panel-container-header-right\">\n            Completion: {this.getDisplayPercent()}%\n          </div>\n        </div>\n        {panels}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport PanelsContainer from \"./components/PanelsContainer.js\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      panelsContent: {\n        1: {\n          panelTitle: \"First panel\",\n          panelBody: \"Hello there\",\n          complete: false,\n          active: false,\n        },\n        2: {\n          panelTitle: \"Second panel\",\n          panelBody: \"Another happy landing\",\n          complete: false,\n          active: false,\n        },\n        3: {\n          panelTitle: \"Third panel\",\n          panelBody: \"The negotiations were short\",\n          complete: false,\n          active: false,\n        },\n      },\n    };\n  }\n\n  onCreateNewEmptyPanel = () => {\n    let nextId = Math.max(...Object.keys(this.state.panelsContent)) + 1\n    this.setState({\n      panelsContent: {\n        ...this.state.panelsContent,\n          [nextId]: {\n          panelTitle: \"Lorem ipsum\",\n          panelBody: \"Lorem ipsum\",\n          complete: false,\n          active: false,\n        },\n      },\n    });\n  };\n\n  onPanelComplete = (panelId) => {\n    let newPanelsContent = { ...this.state.panelsContent };\n    newPanelsContent[panelId][\"complete\"] = !newPanelsContent[panelId][\n      \"complete\"\n    ];\n    this.setState({\n      panelsContent: newPanelsContent,\n    });\n  };\n\n  onPanelDelete = (panelId) => {\n    let newPanelsContent = { ...this.state.panelsContent };\n    delete newPanelsContent[panelId];\n    this.setState({\n      panelsContent: newPanelsContent,\n    });\n  };\n\n  onPanelSelect = (panelId) => {\n    let newPanelsContent = { ...this.state.panelsContent };\n    newPanelsContent[panelId][\"active\"] = !newPanelsContent[panelId][\"active\"];\n    Object.entries(newPanelsContent)\n      .filter((entry) => entry[0] !== panelId)\n      .forEach((panel) => (panel[1][\"active\"] = false));\n    this.setState({ panelsContent: newPanelsContent });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PanelsContainer\n          onCreateNewEmptyPanel={this.onCreateNewEmptyPanel}\n          onPanelDelete={this.onPanelDelete}\n          onPanelComplete={this.onPanelComplete}\n          onPanelSelect={this.onPanelSelect}\n          panelsContent={this.state.panelsContent}\n        ></PanelsContainer>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}